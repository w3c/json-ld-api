{
  "@context": "context.jsonld",
  "@id": "",
  "@type": "mf:Manifest",
  "name": "Transform RDF to JSON-LD",
  "description": "Transform RDF to JSON-LD tests take N-Quads input and use object comparison.",
  "baseIri": "https://w3c.github.io/json-ld-api/tests/",
  "sequence": [
    {
      "@id": "#t0001",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Object Lists",
      "purpose": "Tests generation using different types of objects.",
      "input": "fromRdf/0001-in.nq",
      "expect": "fromRdf/0001-out.jsonld"
    }, {
      "@id": "#t0002",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Native Types",
      "purpose": "Do not use native datatypes for xsd:boolean, xsd:integer, and xsd:double by default.",
      "input": "fromRdf/0002-in.nq",
      "expect": "fromRdf/0002-out.jsonld"
    }, {
      "@id": "#t0003",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "BNodes and references",
      "purpose": "BNode name generation and references between resources.",
      "input": "fromRdf/0003-in.nq",
      "expect": "fromRdf/0003-out.jsonld"
    }, {
      "@id": "#t0004",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Lists",
      "purpose": "Multiple lists with different types of element.",
      "input": "fromRdf/0004-in.nq",
      "expect": "fromRdf/0004-out.jsonld"
    }, {
      "@id": "#t0005",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Document with list",
      "purpose": "Uses a named graph containing a list.",
      "input": "fromRdf/0005-in.nq",
      "expect": "fromRdf/0005-out.jsonld"
    }, {
      "@id": "#t0006",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Two graphs having same subject but different values",
      "purpose": "Ensure that properties and list elements aren't confused between graphs.",
      "input": "fromRdf/0006-in.nq",
      "expect": "fromRdf/0006-out.jsonld"
    }, {
      "@id": "#t0007",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Graph with multiple named graphs",
      "purpose": "Testing @graph recursion.",
      "input": "fromRdf/0007-in.nq",
      "expect": "fromRdf/0007-out.jsonld"
    }, {
      "@id": "#t0008",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List conversion",
      "purpose": "Conversion of lists of lists (the triples in the input are only partially ordered on purpose (1.0 semantics)",
      "input": "fromRdf/0008-in.nq",
      "expect": "fromRdf/0008-out.jsonld",
      "option": {"specVersion": "json-ld-1.0"}
    }, {
      "@id": "#t0009",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List conversion with IRI nodes",
      "purpose": "Preserve IRI list nodes (i.e., not blank nodes) when converting to @list",
      "input": "fromRdf/0009-in.nq",
      "expect": "fromRdf/0009-out.jsonld"
    }, {
      "@id": "#t0010",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern without rdf:nil",
      "purpose": "Do not convert lists that are not terminated by rdf:nil to @list.",
      "input": "fromRdf/0010-in.nq",
      "expect": "fromRdf/0010-out.jsonld"
    }, {
      "@id": "#t0011",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern with extra properties",
      "purpose": "If additional properties are associated to a list node, the list is only partially converted to @list.",
      "input": "fromRdf/0011-in.nq",
      "expect": "fromRdf/0011-out.jsonld"
    }, {
      "@id": "#t0012",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern with cycles",
      "purpose": "Detect lists containing cycles and do not convert them to @list.",
      "input": "fromRdf/0012-in.nq",
      "expect": "fromRdf/0012-out.jsonld"
    }, {
      "@id": "#t0013",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern with multiple values of rdf:first",
      "purpose": "Do not convert list nodes to @list if nodes contain more than one value for rdf:first.",
      "input": "fromRdf/0013-in.nq",
      "expect": "fromRdf/0013-out.jsonld"
    }, {
      "@id": "#t0014",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern with multiple values of rdf:rest",
      "purpose": "Do not convert list nodes to @list if nodes contain more than one value for rdf:rest.",
      "input": "fromRdf/0014-in.nq",
      "expect": "fromRdf/0014-out.jsonld"
    }, {
      "@id": "#t0015",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern with IRI rdf:rest",
      "purpose": "Do not convert lists to @list if a list node's rdf:rest is an IRI.",
      "input": "fromRdf/0015-in.nq",
      "expect": "fromRdf/0015-out.jsonld"
    }, {
      "@id": "#t0016",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "List pattern with type rdf:List",
      "purpose": "List nodes may have a rdf:type rdf:List.",
      "input": "fromRdf/0016-in.nq",
      "expect": "fromRdf/0016-out.jsonld"
    }, {
      "@id": "#t0017",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "Remove duplicate triples",
      "purpose": "Equivalent triples are used only once",
      "input": "fromRdf/0017-in.nq",
      "expect": "fromRdf/0017-out.jsonld"
    }, {
      "@id": "#t0018",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "use native types flag set to true",
      "purpose": "Literals with datatype xsd:boolean, xsd:integer, and xsd:double are serialized using native scalar values",
      "option": {
        "useNativeTypes": true
      },
      "input": "fromRdf/0018-in.nq",
      "expect": "fromRdf/0018-out.jsonld"
    }, {
      "@id": "#t0019",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "use rdf:type flag set to false",
      "purpose": "Setting useRdfType to true causes an rdf:type predicate to be treated like a normal property, not @type",
      "option": {
        "useRdfType": true
      },
      "input": "fromRdf/0019-in.nq",
      "expect": "fromRdf/0019-out.jsonld"
    }, {
      "@id": "#t0020",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "list with node shared across graphs",
      "purpose": "An otherwise conformant list with a node shared across different lists does not serialize using @list",
      "input": "fromRdf/0020-in.nq",
      "expect": "fromRdf/0020-out.jsonld"
    }, {
      "@id": "#t0021",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "list with node shared across graphs (same triple in different graphs)",
      "purpose": "If a list node is used in different graphs, it isn't removed and converted to @list",
      "input": "fromRdf/0021-in.nq",
      "expect": "fromRdf/0021-out.jsonld"
    }, {
      "@id": "#t0022",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "list from duplicate triples",
      "purpose": "Duplicate triples for a list node will not prevent @list from being properly generated",
      "input": "fromRdf/0022-in.nq",
      "expect": "fromRdf/0022-out.jsonld"
    }, {
      "@id": "#t0023",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "triple with RDF nil subject",
      "purpose": "Test triple with RDF nil subject",
      "input": "fromRdf/0023-in.nq",
      "expect": "fromRdf/0023-out.jsonld"
    }, {
      "@id": "#tli01",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "@list containing empty @list",
      "purpose": "List of lists",
      "input": "fromRdf/li01-in.nq",
      "expect": "fromRdf/li01-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tli02",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "@list containing multiple lists",
      "purpose": "List of lists",
      "input": "fromRdf/li02-in.nq",
      "expect": "fromRdf/li02-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tli03",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "t0008 as interpreted for 1.1. ",
      "purpose": "List of lists",
      "input": "fromRdf/li02-in.nq",
      "expect": "fromRdf/li02-out.jsonld",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tnt01",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_ascii_boundaries",
      "purpose": "literal_ascii_boundaries '\\x00\\x26\\x28...' from N-Triples",
      "input": "fromRdf/nt01-in.nq",
      "expect": "fromRdf/nt01-out.jsonld"
    }, {
      "@id": "#tnt02",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_UTF8_boundaries",
      "purpose": "literal_with_UTF8_boundaries '\\x80\\x7ff\\x800\\xfff...' from N-Triples",
      "input": "fromRdf/nt02-in.nq",
      "expect": "fromRdf/nt02-out.jsonld"
    }, {
      "@id": "#tnt03",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_all_controls",
      "purpose": "literal_all_controls '\\x00\\x01\\x02\\x03\\x04...' from N-Triples",
      "input": "fromRdf/nt03-in.nq",
      "expect": "fromRdf/nt03-out.jsonld"
    }, {
      "@id": "#tnt04",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_all_punctuation",
      "purpose": "literal_all_punctuation '!\"#$%&()...' from N-Triples",
      "input": "fromRdf/nt04-in.nq",
      "expect": "fromRdf/nt04-out.jsonld"
    }, {
      "@id": "#tnt05",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_squote",
      "purpose": "literal with squote \"x'y\" from N-Triples",
      "input": "fromRdf/nt05-in.nq",
      "expect": "fromRdf/nt05-out.jsonld"
    }, {
      "@id": "#tnt06",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_2_squotes",
      "purpose": "literal with 2 squotes \"x''y\" from N-Triples",
      "input": "fromRdf/nt06-in.nq",
      "expect": "fromRdf/nt06-out.jsonld"
    }, {
      "@id": "#tnt07",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_dquote",
      "purpose": "literal with dquote \"x\"y\" from N-Triples",
      "input": "fromRdf/nt07-in.nq",
      "expect": "fromRdf/nt07-out.jsonld"
    }, {
      "@id": "#tnt08",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_2_dquotes",
      "purpose": "literal with 2 dquotes \"\"\"a\"\"b\"\"\" from N-Triples",
      "input": "fromRdf/nt08-in.nq",
      "expect": "fromRdf/nt08-out.jsonld"
    }, {
      "@id": "#tnt09",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_REVERSE_SOLIDUS2",
      "purpose": "REVERSE SOLIDUS at end of literal from N-Triples",
      "input": "fromRdf/nt09-in.nq",
      "expect": "fromRdf/nt09-out.jsonld"
    }, {
      "@id": "#tnt10",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_CHARACTER_TABULATION",
      "purpose": "literal with CHARACTER TABULATION from N-Triples",
      "input": "fromRdf/nt10-in.nq",
      "expect": "fromRdf/nt10-out.jsonld"
    }, {
      "@id": "#tnt11",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_BACKSPACE",
      "purpose": "literal with BACKSPACE from N-Triples",
      "input": "fromRdf/nt11-in.nq",
      "expect": "fromRdf/nt11-out.jsonld"
    }, {
      "@id": "#tnt12",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_LINE_FEED",
      "purpose": "literal with LINE FEED from N-Triples",
      "input": "fromRdf/nt12-in.nq",
      "expect": "fromRdf/nt12-out.jsonld"
    }, {
      "@id": "#tnt13",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_CARRIAGE_RETURN",
      "purpose": "literal with CARRIAGE RETURN from N-Triples",
      "input": "fromRdf/nt13-in.nq",
      "expect": "fromRdf/nt13-out.jsonld"
    }, {
      "@id": "#tnt14",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_FORM_FEED",
      "purpose": "literal with FORM FEED from N-Triples",
      "input": "fromRdf/nt14-in.nq",
      "expect": "fromRdf/nt14-out.jsonld"
    }, {
      "@id": "#tnt15",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_REVERSE_SOLIDUS",
      "purpose": "literal with REVERSE SOLIDUS from N-Triples",
      "input": "fromRdf/nt15-in.nq",
      "expect": "fromRdf/nt15-out.jsonld"
    }, {
      "@id": "#tnt16",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_numeric_escape4",
      "purpose": "literal with numeric escape4 \\u from N-Triples",
      "input": "fromRdf/nt16-in.nq",
      "expect": "fromRdf/nt16-out.jsonld"
    }, {
      "@id": "#tnt17",
      "@type": ["jld:PositiveEvaluationTest", "jld:FromRDFTest"],
      "name": "literal_with_numeric_escape8",
      "purpose": "literal with numeric escape8 \\U from N-Triples",
      "input": "fromRdf/nt17-in.nq",
      "expect": "fromRdf/nt17-out.jsonld"
    }
  ]
}
