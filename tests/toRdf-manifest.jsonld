{
  "@context": "context.jsonld",
  "@id": "",
  "@type": "mf:Manifest",
  "name": "Transform JSON-LD to RDF",
  "description": "JSON-LD to RDF tests generate RDF Datasets and use RDF Dataset Isomorphism comparison.",
  "baseIri": "https://w3c.github.io/json-ld-api/tests/",
  "sequence": [
    {
      "@id": "#t0001",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Plain literal with URIs",
      "purpose": "Tests generation of a triple using full URIs and a plain literal.",
      "input": "toRdf/0001-in.jsonld",
      "expect": "toRdf/0001-out.nq"
    }, {
      "@id": "#t0002",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Plain literal with CURIE from default context",
      "purpose": "Tests generation of a triple using a CURIE defined in the default context.",
      "input": "toRdf/0002-in.jsonld",
      "expect": "toRdf/0002-out.nq"
    }, {
      "@id": "#t0003",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Default subject is BNode",
      "purpose": "Tests that a BNode is created if no explicit subject is set.",
      "input": "toRdf/0003-in.jsonld",
      "expect": "toRdf/0003-out.nq"
    }, {
      "@id": "#t0004",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Literal with language tag",
      "purpose": "Tests that a plain literal is created with a language tag.",
      "input": "toRdf/0004-in.jsonld",
      "expect": "toRdf/0004-out.nq"
    }, {
      "@id": "#t0005",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Extended character set literal",
      "purpose": "Tests that a literal may be created using extended characters.",
      "input": "toRdf/0005-in.jsonld",
      "expect": "toRdf/0005-out.nq"
    }, {
      "@id": "#t0006",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Typed literal",
      "purpose": "Tests creation of a literal with a datatype.",
      "input": "toRdf/0006-in.jsonld",
      "expect": "toRdf/0006-out.nq"
    }, {
      "@id": "#t0007",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Tests 'a' generates rdf:type and object is implicit IRI",
      "purpose": "Verify that 'a' is an alias for rdf:type, and the object is created as an IRI.",
      "input": "toRdf/0007-in.jsonld",
      "expect": "toRdf/0007-out.nq"
    }, {
      "@id": "#t0008",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test prefix defined in @context",
      "purpose": "Generate an IRI using a prefix defined within an @context.",
      "input": "toRdf/0008-in.jsonld",
      "expect": "toRdf/0008-out.nq"
    }, {
      "@id": "#t0009",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test using an empty suffix",
      "purpose": "An empty suffix may be used.",
      "input": "toRdf/0009-in.jsonld",
      "expect": "toRdf/0009-out.nq"
    }, {
      "@id": "#t0010",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test object processing defines object",
      "purpose": "A property referencing an associative array gets object from subject of array.",
      "input": "toRdf/0010-in.jsonld",
      "expect": "toRdf/0010-out.nq"
    }, {
      "@id": "#t0011",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test object processing defines object with implicit BNode",
      "purpose": "If no @ is specified, a BNode is created, and will be used as the object of an enclosing property.",
      "input": "toRdf/0011-in.jsonld",
      "expect": "toRdf/0011-out.nq"
    }, {
      "@id": "#t0012",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Multiple Objects for a Single Property",
      "purpose": "Tests that Multiple Objects are for a Single Property using array syntax.",
      "input": "toRdf/0012-in.jsonld",
      "expect": "toRdf/0012-out.nq"
    }, {
      "@id": "#t0013",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Creation of an empty list",
      "purpose": "Tests that @list: [] generates an empty list.",
      "input": "toRdf/0013-in.jsonld",
      "expect": "toRdf/0013-out.nq"
    }, {
      "@id": "#t0014",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Creation of a list with single element",
      "purpose": "Tests that @list generates a list.",
      "input": "toRdf/0014-in.jsonld",
      "expect": "toRdf/0014-out.nq"
    }, {
      "@id": "#t0015",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Creation of a list with multiple elements",
      "purpose": "Tests that list with multiple elements.",
      "input": "toRdf/0015-in.jsonld",
      "expect": "toRdf/0015-out.nq"
    }, {
      "@id": "#t0016",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Empty IRI expands to resource location",
      "purpose": "Expanding an empty IRI uses the test file location.",
      "input": "toRdf/0016-in.jsonld",
      "expect": "toRdf/0016-out.nq"
    }, {
      "@id": "#t0017",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Relative IRI expands relative resource location",
      "purpose": "Expanding a relative IRI uses the test file location.",
      "input": "toRdf/0017-in.jsonld",
      "expect": "toRdf/0017-out.nq"
    }, {
      "@id": "#t0018",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Frag ID expands relative resource location",
      "purpose": "Expanding a fragment uses the test file location.",
      "input": "toRdf/0018-in.jsonld",
      "expect": "toRdf/0018-out.nq"
    }, {
      "@id": "#t0019",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test type coercion to anyURI",
      "purpose": "Tests coercion of object to anyURI when specified.",
      "input": "toRdf/0019-in.jsonld",
      "expect": "toRdf/0019-out.nq"
    }, {
      "@id": "#t0020",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test type coercion to typed literal",
      "purpose": "Tests coercion of object to a typed literal when specified.",
      "input": "toRdf/0020-in.jsonld",
      "expect": "toRdf/0020-out.nq"
    }, {
      "@id": "#t0022",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test coercion of double value",
      "purpose": "Tests that a decimal value generates a xsd:double typed literal;.",
      "input": "toRdf/0022-in.jsonld",
      "expect": "toRdf/0022-out.nq"
    }, {
      "@id": "#t0023",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test coercion of integer value",
      "purpose": "Tests that a decimal value generates a xsd:integer typed literal.",
      "input": "toRdf/0023-in.jsonld",
      "expect": "toRdf/0023-out.nq"
    }, {
      "@id": "#t0024",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test coercion of boolean value",
      "purpose": "Tests that a decimal value generates a xsd:boolean typed literal.",
      "input": "toRdf/0024-in.jsonld",
      "expect": "toRdf/0024-out.nq"
    }, {
      "@id": "#t0025",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test list coercion with single element",
      "purpose": "Tests that an array with a single element on a property with @list coercion creates an RDF Collection.",
      "input": "toRdf/0025-in.jsonld",
      "expect": "toRdf/0025-out.nq"
    }, {
      "@id": "#t0026",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Test creation of multiple types",
      "purpose": "Tests that @type with an array of types creates multiple types.",
      "input": "toRdf/0026-in.jsonld",
      "expect": "toRdf/0026-out.nq"
    }, {
      "@id": "#t0027",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Simple named graph (Wikidata)",
      "purpose": "Using @graph with other keys places triples in a named graph.",
      "input": "toRdf/0027-in.jsonld",
      "expect": "toRdf/0027-out.nq"
    }, {
      "@id": "#t0028",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Simple named graph",
      "purpose": "Signing a graph.",
      "input": "toRdf/0028-in.jsonld",
      "expect": "toRdf/0028-out.nq"
    }, {
      "@id": "#t0029",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "named graph with embedded named graph",
      "purpose": "Tests that named graphs containing named graphs flatten to single level of graph naming.",
      "input": "toRdf/0029-in.jsonld",
      "expect": "toRdf/0029-out.nq"
    }, {
      "@id": "#t0030",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "top-level graph with string subject reference",
      "purpose": "Tests graphs containing subject references as strings.",
      "input": "toRdf/0030-in.jsonld",
      "expect": "toRdf/0030-out.nq"
    }, {
      "@id": "#t0031",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Reverse property",
      "purpose": "Tests conversion of reverse properties.",
      "input": "toRdf/0031-in.jsonld",
      "expect": "toRdf/0031-out.nq"
    }, {
      "@id": "#t0032",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@context reordering",
      "purpose": "Tests that generated triples do not depend on order of @context.",
      "input": "toRdf/0032-in.jsonld",
      "expect": "toRdf/0032-out.nq"
    }, {
      "@id": "#t0033",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@id reordering",
      "purpose": "Tests that generated triples do not depend on order of @id.",
      "input": "toRdf/0033-in.jsonld",
      "expect": "toRdf/0033-out.nq"
    }, {
      "@id": "#t0034",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "context properties reordering",
      "purpose": "Tests that generated triples do not depend on order of properties inside @context.",
      "input": "toRdf/0034-in.jsonld",
      "expect": "toRdf/0034-out.nq"
    }, {
      "@id": "#t0035",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "non-fractional numbers converted to xsd:double",
      "purpose": "xsd:double's canonical lexical is used when converting numbers without fraction that are coerced to xsd:double",
      "input": "toRdf/0035-in.jsonld",
      "expect": "toRdf/0035-out.nq"
    }, {
      "@id": "#t0036",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Use nodeMapGeneration bnode labels",
      "purpose": "The toRDF algorithm does not relabel blank nodes; it reuses the counter from the nodeMapGeneration to generate new ones",
      "input": "toRdf/0036-in.jsonld",
      "expect": "toRdf/0036-out.nq"
    }, {
      "@id": "#t0113",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Dataset with a IRI named graph",
      "purpose": "Basic use of creating a named graph using an IRI name",
      "input": "toRdf/0113-in.jsonld",
      "expect": "toRdf/0113-out.nq"
    }, {
      "@id": "#t0114",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Dataset with a IRI named graph",
      "purpose": "Basic use of creating a named graph using a BNode name",
      "input": "toRdf/0114-in.jsonld",
      "expect": "toRdf/0114-out.nq"
    }, {
      "@id": "#t0115",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Dataset with a default and two named graphs",
      "purpose": "Dataset with a default and two named graphs (IRI and BNode)",
      "input": "toRdf/0115-in.jsonld",
      "expect": "toRdf/0115-out.nq"
    }, {
      "@id": "#t0116",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Dataset from node with embedded named graph",
      "purpose": "Embedding @graph in a node creates a named graph",
      "input": "toRdf/0116-in.jsonld",
      "expect": "toRdf/0116-out.nq"
    }, {
      "@id": "#t0117",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Dataset from node with embedded named graph (bnode)",
      "purpose": "Embedding @graph in a node creates a named graph. Graph name is created if there is no subject",
      "input": "toRdf/0117-in.jsonld",
      "expect": "toRdf/0117-out.nq"
    }, {
      "@id": "#t0118",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "produce generalized RDF flag",
      "purpose": "Triples with blank node predicates are not dropped if the produce generalized RDF flag is true.",
      "option": {
        "processingMode": "json-ld-1.0",
        "produceGeneralizedRdf": true
      },
      "input": "toRdf/0118-in.jsonld",
      "expect": "toRdf/0118-out.nq"
    }, {
      "@id": "#t0119",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Blank nodes with reverse properties",
      "purpose": "Proper (re-)labeling of blank nodes if used with reverse properties.",
      "input": "toRdf/0119-in.jsonld",
      "expect": "toRdf/0119-out.nq"
    }, {
      "@id": "#t0120",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (0)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0120-in.jsonld",
      "expect": "toRdf/0120-out.nq"
    }, {
      "@id": "#t0121",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (1)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0121-in.jsonld",
      "expect": "toRdf/0121-out.nq"
    }, {
      "@id": "#t0122",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (2)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0122-in.jsonld",
      "expect": "toRdf/0122-out.nq"
    }, {
      "@id": "#t0123",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (3)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0123-in.jsonld",
      "expect": "toRdf/0123-out.nq"
    }, {
      "@id": "#t0124",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (4)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0124-in.jsonld",
      "expect": "toRdf/0124-out.nq"
    }, {
      "@id": "#t0125",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (5)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0125-in.jsonld",
      "expect": "toRdf/0125-out.nq"
    }, {
      "@id": "#t0126",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (6)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0126-in.jsonld",
      "expect": "toRdf/0126-out.nq"
    }, {
      "@id": "#t0127",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (7)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0127-in.jsonld",
      "expect": "toRdf/0127-out.nq"
    }, {
      "@id": "#t0128",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (8)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0128-in.jsonld",
      "expect": "toRdf/0128-out.nq"
    }, {
      "@id": "#t0129",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (9)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0129-in.jsonld",
      "expect": "toRdf/0129-out.nq"
    }, {
      "@id": "#t0130",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (10)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0130-in.jsonld",
      "expect": "toRdf/0130-out.nq"
    }, {
      "@id": "#t0131",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (11)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0131-in.jsonld",
      "expect": "toRdf/0131-out.nq"
    }, {
      "@id": "#t0132",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "IRI Resolution (12)",
      "purpose": "IRI resolution according to RFC3986.",
      "input": "toRdf/0132-in.jsonld",
      "expect": "toRdf/0132-out.nq"
    }, {
      "@id": "#te001",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "drop free-floating nodes",
      "purpose": "Free-floating nodes do not generate RDF triples (from expand-0001)",
      "input": "toRdf/e001-in.jsonld",
      "expect": "toRdf/e001-out.nq"
    }, {
      "@id": "#te002",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "basic",
      "purpose": "Basic RDF conversion (from expand-0002)",
      "input": "toRdf/e002-in.jsonld",
      "expect": "toRdf/e002-out.nq"
    }, {
      "@id": "#te003",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "drop null and unmapped properties",
      "purpose": "Properties mapped to null or which are never mapped are dropped (from expand-0003)",
      "input": "toRdf/e003-in.jsonld",
      "expect": "toRdf/e003-out.nq"
    }, {
      "@id": "#te004",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "optimize @set, keep empty arrays",
      "purpose": "RDF version of expand-0004",
      "input": "toRdf/e004-in.jsonld",
      "expect": "toRdf/e004-out.nq"
    }, {
      "@id": "#te005",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "do not expand aliased @id/@type",
      "purpose": "RDF version of expand-0005",
      "input": "toRdf/e005-in.jsonld",
      "expect": "toRdf/e005-out.nq"
    }, {
      "@id": "#te006",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "alias keywords",
      "purpose": "RDF version of expand-0006",
      "input": "toRdf/e006-in.jsonld",
      "expect": "toRdf/e006-out.nq"
    }, {
      "@id": "#te007",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "date type-coercion",
      "purpose": "Type-coerced dates generate typed literals (from expand-0007)",
      "input": "toRdf/e007-in.jsonld",
      "expect": "toRdf/e007-out.nq"
    }, {
      "@id": "#te008",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@value with @language",
      "purpose": "RDF version of expand-0008",
      "input": "toRdf/e008-in.jsonld",
      "expect": "toRdf/e008-out.nq"
    }, {
      "@id": "#te009",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@graph with terms",
      "purpose": "RDF version of expand-0009",
      "input": "toRdf/e009-in.jsonld",
      "expect": "toRdf/e009-out.nq"
    }, {
      "@id": "#te010",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "native types",
      "purpose": "Native types generate typed literals (from expand-0010)",
      "input": "toRdf/e010-in.jsonld",
      "expect": "toRdf/e010-out.nq"
    }, {
      "@id": "#te011",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "coerced @id",
      "purpose": "RDF version of expand-0011",
      "input": "toRdf/e011-in.jsonld",
      "expect": "toRdf/e011-out.nq"
    }, {
      "@id": "#te012",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@graph with embed",
      "purpose": "RDF version of expand-0012",
      "input": "toRdf/e012-in.jsonld",
      "expect": "toRdf/e012-out.nq"
    }, {
      "@id": "#te013",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "expand already expanded",
      "purpose": "RDF version of expand-0013",
      "input": "toRdf/e013-in.jsonld",
      "expect": "toRdf/e013-out.nq"
    }, {
      "@id": "#te014",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@set of @value objects with keyword aliases",
      "purpose": "RDF version of expand-0014",
      "input": "toRdf/e014-in.jsonld",
      "expect": "toRdf/e014-out.nq",
      "option": {"specVersion": "json-ld-1.0"}
    }, {
      "@id": "#te015",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "collapse set of sets, keep empty lists",
      "purpose": "RDF version of expand-0015",
      "input": "toRdf/e015-in.jsonld",
      "expect": "toRdf/e015-out.nq"
    }, {
      "@id": "#te016",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "context reset",
      "purpose": "RDF version of expand-0016",
      "input": "toRdf/e016-in.jsonld",
      "expect": "toRdf/e016-out.nq"
    }, {
      "@id": "#te017",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@graph and @id aliased",
      "purpose": "RDF version of expand-0017",
      "input": "toRdf/e017-in.jsonld",
      "expect": "toRdf/e017-out.nq"
    }, {
      "@id": "#te018",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "override default @language",
      "purpose": "RDF version of expand-0018",
      "input": "toRdf/e018-in.jsonld",
      "expect": "toRdf/e018-out.nq"
    }, {
      "@id": "#te019",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "remove @value = null",
      "purpose": "RDF version of expand-0019",
      "input": "toRdf/e019-in.jsonld",
      "expect": "toRdf/e019-out.nq"
    }, {
      "@id": "#te020",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "do not remove @graph if not at top-level",
      "purpose": "Embedded @graph without @id creates BNode-labeled named graph (from expand-0020)",
      "input": "toRdf/e020-in.jsonld",
      "expect": "toRdf/e020-out.nq"
    }, {
      "@id": "#te021",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "do not remove @graph at top-level if not only property",
      "purpose": "RDF version of expand-0021",
      "input": "toRdf/e021-in.jsonld",
      "expect": "toRdf/e021-out.nq"
    }, {
      "@id": "#te022",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "expand value with default language",
      "purpose": "RDF version of expand-0022",
      "input": "toRdf/e022-in.jsonld",
      "expect": "toRdf/e022-out.nq"
    }, {
      "@id": "#te023",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Lists and sets of properties with list/set coercion",
      "purpose": "RDF version of expand-0023",
      "input": "toRdf/e023-in.jsonld",
      "expect": "toRdf/e023-out.nq"
    }, {
      "@id": "#te024",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Multiple contexts",
      "purpose": "RDF version of expand-0024",
      "input": "toRdf/e024-in.jsonld",
      "expect": "toRdf/e024-out.nq"
    }, {
      "@id": "#te025",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Problematic IRI expansion tests",
      "purpose": "RDF version of expand-0025",
      "input": "toRdf/e025-in.jsonld",
      "expect": "toRdf/e025-out.nq"
    }, {
      "@id": "#te026",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expanding term mapping to @type uses @type syntax",
      "purpose": "RDF version of expand-0026",
      "input": "toRdf/e026-in.jsonld",
      "expect": "toRdf/e026-out.nq",
      "option": {"specVersion": "json-ld-1.0"}
    }, {
      "@id": "#te027",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Keep duplicate values in @list and @set",
      "purpose": "RDF version of expand-0027",
      "input": "toRdf/e027-in.jsonld",
      "expect": "toRdf/e027-out.nq"
    }, {
      "@id": "#te028",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Use @vocab in properties and @type but not in @id",
      "purpose": "RDF version of expand-0028",
      "input": "toRdf/e028-in.jsonld",
      "expect": "toRdf/e028-out.nq"
    }, {
      "@id": "#te029",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Relative IRIs",
      "purpose": "RDF version of expand-0029",
      "input": "toRdf/e029-in.jsonld",
      "expect": "toRdf/e029-out.nq"
    }, {
      "@id": "#te030",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Language maps",
      "purpose": "RDF version of expand-0030",
      "input": "toRdf/e030-in.jsonld",
      "expect": "toRdf/e030-out.nq"
    }, {
      "@id": "#te031",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "type-coercion of native types",
      "purpose": "RDF version of expand-0031",
      "input": "toRdf/e031-in.jsonld",
      "expect": "toRdf/e031-out.nq"
    }, {
      "@id": "#te032",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Mapping a term to null decouples it from @vocab",
      "purpose": "RDF version of expand-0032",
      "input": "toRdf/e032-in.jsonld",
      "expect": "toRdf/e032-out.nq"
    }, {
      "@id": "#te033",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Using @vocab with with type-coercion",
      "purpose": "RDF version of expand-0033",
      "input": "toRdf/e033-in.jsonld",
      "expect": "toRdf/e033-out.nq"
    }, {
      "@id": "#te034",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Multiple properties expanding to the same IRI",
      "purpose": "RDF version of expand-0034",
      "input": "toRdf/e034-in.jsonld",
      "expect": "toRdf/e034-out.nq"
    }, {
      "@id": "#te035",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Language maps with @vocab, default language, and colliding property",
      "purpose": "RDF version of expand-0035",
      "input": "toRdf/e035-in.jsonld",
      "expect": "toRdf/e035-out.nq"
    }, {
      "@id": "#te036",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expanding @index",
      "purpose": "RDF version of expand-0036",
      "input": "toRdf/e036-in.jsonld",
      "expect": "toRdf/e036-out.nq"
    }, {
      "@id": "#te037",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expanding @reverse",
      "purpose": "RDF version of expand-0037",
      "input": "toRdf/e037-in.jsonld",
      "expect": "toRdf/e037-out.nq"
    }, {
      "@id": "#te038",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Drop blank node predicates by default",
      "purpose": "Triples with blank node predicates are dropped by default (from expand-0038).",
      "option": {"specVersion": "json-ld-1.0"},
      "input": "toRdf/e038-in.jsonld",
      "expect": "toRdf/e038-out.nq"
    }, {
      "@id": "#te039",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Using terms in a reverse-maps",
      "purpose": "RDF version of expand-0039",
      "input": "toRdf/e039-in.jsonld",
      "expect": "toRdf/e039-out.nq"
    }, {
      "@id": "#te040",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "language and index expansion on non-objects",
      "purpose": "RDF version of expand-0040",
      "input": "toRdf/e040-in.jsonld",
      "expect": "toRdf/e040-out.nq"
    }, {
      "@id": "#te041",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Reset the default language",
      "purpose": "RDF version of expand-0041",
      "input": "toRdf/e041-in.jsonld",
      "expect": "toRdf/e041-out.nq"
    }, {
      "@id": "#te042",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expanding reverse properties",
      "purpose": "RDF version of expand-0042",
      "input": "toRdf/e042-in.jsonld",
      "expect": "toRdf/e042-out.nq"
    }, {
      "@id": "#te043",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Using reverse properties inside a @reverse-container",
      "purpose": "RDF version of expand-0043",
      "input": "toRdf/e043-in.jsonld",
      "expect": "toRdf/e043-out.nq"
    }, {
      "@id": "#te044",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Ensure index maps use language mapping",
      "purpose": "RDF version of expand-0044",
      "input": "toRdf/e044-in.jsonld",
      "expect": "toRdf/e044-out.nq"
    }, {
      "@id": "#te045",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Top-level value objects are removed",
      "purpose": "RDF version of expand-0045",
      "input": "toRdf/e045-in.jsonld",
      "expect": "toRdf/e045-out.nq"
    }, {
      "@id": "#te046",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Free-floating nodes are removed",
      "purpose": "RDF version of expand-0046",
      "input": "toRdf/e046-in.jsonld",
      "expect": "toRdf/e046-out.nq"
    }, {
      "@id": "#te047",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Remove free-floating set values and lists",
      "purpose": "RDF version of expand-0047",
      "input": "toRdf/e047-in.jsonld",
      "expect": "toRdf/e047-out.nq"
    }, {
      "@id": "#te048",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Terms are ignored in @id",
      "purpose": "RDF version of expand-0048",
      "input": "toRdf/e048-in.jsonld",
      "expect": "toRdf/e048-out.nq"
    }, {
      "@id": "#te049",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Using strings as value of a reverse property",
      "purpose": "RDF version of expand-0049",
      "input": "toRdf/e049-in.jsonld",
      "expect": "toRdf/e049-out.nq"
    }, {
      "@id": "#te050",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Term definitions with prefix separate from prefix definitions",
      "purpose": "RDF version of expand-0050",
      "input": "toRdf/e050-in.jsonld",
      "expect": "toRdf/e050-out.nq"
    }, {
      "@id": "#te051",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expansion of keyword aliases in term definitions",
      "purpose": "RDF version of expand-0051",
      "input": "toRdf/e051-in.jsonld",
      "expect": "toRdf/e051-out.nq"
    }, {
      "@id": "#te052",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@vocab-relative IRIs in term definitions",
      "purpose": "RDF version of expand-0052",
      "input": "toRdf/e052-in.jsonld",
      "expect": "toRdf/e052-out.nq"
    }, {
      "@id": "#te053",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand absolute IRI with @type: @vocab",
      "purpose": "RDF version of expand-0053",
      "input": "toRdf/e053-in.jsonld",
      "expect": "toRdf/e053-out.nq"
    }, {
      "@id": "#te054",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand term with @type: @vocab",
      "purpose": "RDF version of expand-0054",
      "input": "toRdf/e054-in.jsonld",
      "expect": "toRdf/e054-out.nq"
    }, {
      "@id": "#te055",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand @vocab-relative term with @type: @vocab",
      "purpose": "RDF version of expand-0055",
      "input": "toRdf/e055-in.jsonld",
      "expect": "toRdf/e055-out.nq"
    }, {
      "@id": "#te056",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Use terms with @type: @vocab but not with @type: @id",
      "purpose": "RDF version of expand-0056",
      "input": "toRdf/e056-in.jsonld",
      "expect": "toRdf/e056-out.nq"
    }, {
      "@id": "#te057",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand relative IRI with @type: @vocab",
      "purpose": "RDF version of expand-0057",
      "input": "toRdf/e057-in.jsonld",
      "expect": "toRdf/e057-out.nq"
    }, {
      "@id": "#te058",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand compact IRI with @type: @vocab",
      "purpose": "RDF version of expand-0058",
      "input": "toRdf/e058-in.jsonld",
      "expect": "toRdf/e058-out.nq"
    }, {
      "@id": "#te059",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Reset @vocab by setting it to null",
      "purpose": "RDF version of expand-0059",
      "input": "toRdf/e059-in.jsonld",
      "expect": "toRdf/e059-out.nq"
    }, {
      "@id": "#te060",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Overwrite document base with @base and reset it again",
      "purpose": "RDF version of expand-0060",
      "input": "toRdf/e060-in.jsonld",
      "expect": "toRdf/e060-out.nq"
    }, {
      "@id": "#te061",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Coercing native types to arbitrary datatypes",
      "purpose": "RDF version of expand-0061",
      "input": "toRdf/e061-in.jsonld",
      "expect": "toRdf/e061-out.nq"
    }, {
      "@id": "#te062",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Various relative IRIs with with @base",
      "purpose": "RDF version of expand-0062",
      "input": "toRdf/e062-in.jsonld",
      "expect": "toRdf/e062-out.nq"
    }, {
      "@id": "#te063",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand a reverse property with an index-container",
      "purpose": "RDF version of expand-0063",
      "input": "toRdf/e063-in.jsonld",
      "expect": "toRdf/e063-out.nq"
    }, {
      "@id": "#te064",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Expand reverse property whose values are unlabeled blank nodes",
      "purpose": "RDF version of expand-0064",
      "input": "toRdf/e064-in.jsonld",
      "expect": "toRdf/e064-out.nq"
    }, {
      "@id": "#te065",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Keys that are not mapped to an IRI in a reverse-map are dropped",
      "purpose": "RDF version of expand-0065",
      "input": "toRdf/e065-in.jsonld",
      "expect": "toRdf/e065-out.nq"
    }, {
      "@id": "#te066",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Use @vocab to expand keys in reverse-maps",
      "purpose": "RDF version of expand-0066",
      "input": "toRdf/e066-in.jsonld",
      "expect": "toRdf/e066-out.nq"
    }, {
      "@id": "#te067",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "prefix:://sufffix not a compact IRI",
      "purpose": "RDF version of expand-0067",
      "input": "toRdf/e067-in.jsonld",
      "expect": "toRdf/e067-out.nq"
    }, {
      "@id": "#te068",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "_::sufffix not a compact IRI",
      "purpose": "RDF version of expand-0068",
      "input": "toRdf/e068-in.jsonld",
      "expect": "toRdf/e068-out.nq"
    }, {
      "@id": "#te069",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Compact IRI as term with type mapping",
      "purpose": "RDF version of expand-0069",
      "input": "toRdf/e069-in.jsonld",
      "expect": "toRdf/e069-out.nq"
    }, {
      "@id": "#te070",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Redefine compact IRI with itself",
      "purpose": "RDF version of expand-0070",
      "input": "toRdf/e070-in.jsonld",
      "expect": "toRdf/e070-out.nq"
    }, {
      "@id": "#te071",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Redefine terms looking like compact IRIs",
      "purpose": "RDF version of expand-0071",
      "input": "toRdf/e071-in.jsonld",
      "expect": "toRdf/e071-out.nq",
      "option": {"specVersion": "json-ld-1.0"}
    }, {
      "@id": "#te072",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Redefine term using @vocab, not itself",
      "purpose": "RDF version of expand-0072",
      "input": "toRdf/e072-in.jsonld",
      "expect": "toRdf/e072-out.nq"
    }, {
      "@id": "#th001",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transforms embedded JSON-LD script element",
      "purpose": "Tests embedded JSON-LD in HTML",
      "input": "toRdf/h001-in.html",
      "expect": "toRdf/h001-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#th002",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transforms first embedded JSON-LD script element",
      "purpose": "Tests embedded JSON-LD in HTML",
      "input": "toRdf/h002-in.html",
      "expect": "toRdf/h002-out.nq",
      "option": {"specVersion": "json-ld-1.1", "extractAllScripts": false}
    }, {
      "@id": "#th003",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transforms targeted JSON-LD script element",
      "purpose": "Tests embedded JSON-LD in HTML with fragment identifier",
      "input": "toRdf/h003-in.html#second",
      "expect": "toRdf/h003-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs01",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (boolean true)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (boolean true).",
      "input": "toRdf/js01-in.jsonld",
      "expect": "toRdf/js01-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs02",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (boolean false)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (boolean false).",
      "input": "toRdf/js02-in.jsonld",
      "expect": "toRdf/js02-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs03",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (double)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (double).",
      "input": "toRdf/js03-in.jsonld",
      "expect": "toRdf/js03-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs04",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (double-zero)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (double-zero).",
      "input": "toRdf/js04-in.jsonld",
      "expect": "toRdf/js04-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs05",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (integer)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (integer).",
      "input": "toRdf/js05-in.jsonld",
      "expect": "toRdf/js05-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs06",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (object)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (object).",
      "input": "toRdf/js06-in.jsonld",
      "expect": "toRdf/js06-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs07",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal (array)",
      "purpose": "Tests transforming property with @type @json to a JSON literal (array).",
      "input": "toRdf/js07-in.jsonld",
      "expect": "toRdf/js07-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs08",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal with array canonicalization",
      "purpose": "Tests Transforming JSON literal with array canonicalization.",
      "input": "toRdf/js08-in.jsonld",
      "expect": "toRdf/js08-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs09",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal with string canonicalization",
      "purpose": "Tests transforming JSON literal with string canonicalization.",
      "input": "toRdf/js09-in.jsonld",
      "expect": "toRdf/js09-out.nq",
      "option": {"specVersion": "json-ld-1.1", "processingMode": "json-ld-1.1"}
    }, {
      "@id": "#tjs10",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal with structural canonicalization",
      "purpose": "Tests transforming JSON literal with structural canonicalization.",
      "input": "toRdf/js10-in.jsonld",
      "expect": "toRdf/js10-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs11",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal with unicode canonicalization",
      "purpose": "Tests transforming JSON literal with unicode canonicalization.",
      "input": "toRdf/js11-in.jsonld",
      "expect": "toRdf/js11-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs12",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal with value canonicalization",
      "purpose": "Tests transforming JSON literal with value canonicalization.",
      "input": "toRdf/js12-in.jsonld",
      "expect": "toRdf/js12-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tjs13",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Transform JSON literal with wierd canonicalization",
      "purpose": "Tests transforming JSON literal with wierd canonicalization.",
      "input": "toRdf/js13-in.jsonld",
      "expect": "toRdf/js13-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tli01",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@list containing @list",
      "purpose": "List of lists.",
      "input": "toRdf/li01-in.jsonld",
      "expect": "toRdf/li01-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tli02",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "@list containing empty @list",
      "purpose": "List of lists.",
      "input": "toRdf/li02-in.jsonld",
      "expect": "toRdf/li02-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf01",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid subject IRIs are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf01-in.jsonld",
      "expect": "toRdf/wf01-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf02",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid predicate IRIs are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf02-in.jsonld",
      "expect": "toRdf/wf02-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf03",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid object IRIs are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf03-in.jsonld",
      "expect": "toRdf/wf03-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf04",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid type IRIs are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf04-in.jsonld",
      "expect": "toRdf/wf04-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf05",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid language tags are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf05-in.jsonld",
      "expect": "toRdf/wf05-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf06",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid literal datatype IRIs are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf06-in.jsonld",
      "expect": "toRdf/wf06-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#twf07",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Triples including invalid graph name IRIs are rejected",
      "purpose": "ToRdf emits only well-formed statements.",
      "input": "toRdf/wf07-in.jsonld",
      "expect": "toRdf/wf07-out.nq",
      "option": {"specVersion": "json-ld-1.1"}
    }, {
      "@id": "#tnt01",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_ascii_boundaries",
      "purpose": "literal_ascii_boundaries '\\x00\\x26\\x28...' from N-Triples",
      "input": "toRdf/nt01-in.jsonld"
    }, {
      "@id": "#tnt02",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_UTF8_boundaries",
      "purpose": "literal_with_UTF8_boundaries '\\x80\\x7ff\\x800\\xfff...' from N-Triples",
      "input": "toRdf/nt02-in.jsonld"
    }, {
      "@id": "#tnt03",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_all_controls",
      "purpose": "literal_all_controls '\\x00\\x01\\x02\\x03\\x04...' from N-Triples",
      "input": "toRdf/nt03-in.jsonld"
    }, {
      "@id": "#tnt04",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_all_punctuation",
      "purpose": "literal_all_punctuation '!\"#$%&()...' from N-Triples",
      "input": "toRdf/nt04-in.jsonld"
    }, {
      "@id": "#tnt05",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_squote",
      "purpose": "literal with squote \"x'y\" from N-Triples",
      "input": "toRdf/nt05-in.jsonld"
    }, {
      "@id": "#tnt06",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_2_squotes",
      "purpose": "literal with 2 squotes \"x''y\" from N-Triples",
      "input": "toRdf/nt06-in.jsonld"
    }, {
      "@id": "#tnt07",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_dquote",
      "purpose": "literal with dquote \"x\"y\" from N-Triples",
      "input": "toRdf/nt07-in.jsonld"
    }, {
      "@id": "#tnt08",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_2_dquotes",
      "purpose": "literal with 2 dquotes \"\"\"a\"\"b\"\"\" from N-Triples",
      "input": "toRdf/nt08-in.jsonld"
    }, {
      "@id": "#tnt09",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_REVERSE_SOLIDUS2",
      "purpose": "REVERSE SOLIDUS at end of literal from N-Triples",
      "input": "toRdf/nt09-in.jsonld"
    }, {
      "@id": "#tnt10",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_CHARACTER_TABULATION",
      "purpose": "literal with CHARACTER TABULATION from N-Triples",
      "input": "toRdf/nt10-in.jsonld"
    }, {
      "@id": "#tnt11",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_BACKSPACE",
      "purpose": "literal with BACKSPACE from N-Triples",
      "input": "toRdf/nt11-in.jsonld"
    }, {
      "@id": "#tnt12",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_LINE_FEED",
      "purpose": "literal with LINE FEED from N-Triples",
      "input": "toRdf/nt12-in.jsonld"
    }, {
      "@id": "#tnt13",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_CARRIAGE_RETURN",
      "purpose": "literal with CARRIAGE RETURN from N-Triples",
      "input": "toRdf/nt13-in.jsonld"
    }, {
      "@id": "#tnt14",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_FORM_FEED",
      "purpose": "literal with FORM FEED from N-Triples",
      "input": "toRdf/nt14-in.jsonld"
    }, {
      "@id": "#tnt15",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_REVERSE_SOLIDUS",
      "purpose": "literal with REVERSE SOLIDUS from N-Triples",
      "input": "toRdf/nt15-in.jsonld"
    }, {
      "@id": "#tnt16",
      "@type": ["jld:PositiveSyntaxTest", "jld:ToRDFTest"],
      "name": "literal_with_numeric_escape4",
      "purpose": "literal with numeric escape4 \\u from N-Triples",
      "input": "toRdf/nt16-in.jsonld"
    }, {
      "@id": "#trt01",
      "@type": ["jld:PositiveEvaluationTest", "jld:ToRDFTest"],
      "name": "Representing numbers >= 1e21",
      "purpose": "numbers with no fractions but that are >= 1e21 are represented as xsd:double",
      "option": {"specVersion": "json-ld-1.1"},
      "input": "toRdf/rt01-in.jsonld",
      "expect": "toRdf/rt01-out.nq"
    }
  ]
}
